<?xml version="1.0" encoding="utf-8"?>
<modification>
  <name>Main modification for shop</name>
  <code>default</code>
  <version>1.0</version>
  <author>Lugano</author>
  <link></link>
  <file path="system/engine/action.php">
      <operation>
	 <search regex ="true" quote = "true">
  <![CDATA[~public function __construct($route, $args = array()) {
		$parts = explode('/', str_replace('../', '', (string)$route));

		// Break apart the route
		while ($parts) {
			$file = DIR_APPLICATION . 'controller/' . implode('/', $parts) . '.php';

			if (is_file($file)) {
				$this->file = $file;

				$this->class = 'Controller' . preg_replace('/[^a-zA-Z0-9]/', '', implode('/', $parts));
				break;
			} else {
				$this->method = array_pop($parts);
			}
		}

		if (!$this->method) {
			$this->method = 'index';
		}

		$this->args = $args;
	}~]]>	
     </search>
     <add position ="replace">
<![CDATA[public function __construct($route, $args = array()) {
                    
                static $recursion = TRUE;
              
		$parts = explode('/', str_replace('../', '', (string)$route));

		// Break apart the route
		while ($parts) {
                    
                        if ($recursion) {
                    
                             $file = DIR_APPLICATION . 'controller/' . implode('/', $parts) . '.php';
                        } else {
                            
                             if ($route == 'error/not_found') {
                                 
                                 $file = $_SERVER['DOCUMENT_ROOT'] . '/catalog/controller/' . implode('/', $parts) . '.php';
                             } else {
                             
                                 $file = $_SERVER['DOCUMENT_ROOT'] . '/admin/controller/' . implode('/', $parts) . '.php';
                             }
                        }
			

			if (is_file($file)) {
				$this->file = $file;

				$this->class = 'Controller' . preg_replace('/[^a-zA-Z0-9]/', '', implode('/', $parts));
				break;
			} else {
				$this->method = array_pop($parts);
			}
		}

		if (!$this->method) {
			$this->method = 'index';
		}
                
                if (empty($this->file) || empty($this->class) || empty($this->method)) {
                    
                    if ($recursion) {
                       $recursion = FALSE;
                       Action::__construct($route, $args);  
                    }
                   
                   
                }

		$this->args = $args;
	}]]>

                               
       </add>
    </operation>
  </file>
  <file path="catalog/controller/account/newsletter.php">
      <operation>
	 <search regex ="true" quote = "true">
         <![CDATA[~if (!$this->customer->isLogged()) {
			$this->session->data['redirect'] = $this->url->link('account/newsletter', '', 'SSL');

			$this->response->redirect($this->url->link('account/login', '', 'SSL'));
		}~]]>   
         </search> 
         <add position ="replace">
         <![CDATA[ $this->session->data['redirect'] = $this->url->link('account/newsletter', '', 'SSL');]]> 
         </add>
    </operation>
  </file>
  <file path="catalog/controller/common/footer.php">
      <operation>
	 <search regex ="true" quote = "true">
         <![CDATA[~foreach ($this->model_catalog_information->getInformations() as $result) {
			if ($result['bottom']) {
				$data['informations'][] = array(
					'title' => $result['title'],
					'href'  => $this->url->link('information/information', 'information_id=' . $result['information_id'])
				);
			}
		}~]]>
         </search> 
         <add position ="replace">
         <![CDATA[foreach ($this->model_catalog_information->getInformations() as $result) {
			if ($result['bottom']) {
				$data['informations'][$result['title']] = array(
					'title' => $result['title'],
					'href'  => $this->url->link('information/information', 'information_id=' . $result['information_id'])
				);
			}
		}]]>
       </add>
    </operation>
  </file>
  <file path="catalog/controller/module/filter.php">
      <operation>
	 <search>
             <![CDATA[$data['action'] = str_replace('&amp;', '&', $this->url->link('product/category', 'path=' . $this->request->get['path'] . $url));]]>
         </search>
         <add position ="after">
             <![CDATA[$this->document->addScript('catalog/view/javascript/customer-filter.js');]]>
         </add>  
      </operation>
  </file>
   <file path="catalog/controller/common/footer.php">
      <operation>
	 <search>
             <![CDATA[$data['text_newsletter'] = $this->language->get('text_newsletter');]]>
         </search>
         <add position ="after">
         <![CDATA[$data['telephone'] = $this->config->get('config_telephone');
                // Menu
		$this->load->model('catalog/category');

		$this->load->model('catalog/product');

		$data['categories'] = array();

		$categories = $this->model_catalog_category->getCategories(0);

		foreach ($categories as $category) {
			if ($category['top']) {
				// Level 2
				$children_data = array();

				$children = $this->model_catalog_category->getCategories($category['category_id']);

				foreach ($children as $child) {
					$filter_data = array(
						'filter_category_id'  => $child['category_id'],
						'filter_sub_category' => true
					);

					$children_data[] = array(
						'name'  => $child['name'] . ($this->config->get('config_product_count') ? ' (' . $this->model_catalog_product->getTotalProducts($filter_data) . ')' : ''),
						'href'  => $this->url->link('product/category', 'path=' . $category['category_id'] . '_' . $child['category_id'])
					);
				}

				// Level 1
				$data['categories'][] = array(
					'name'     => $category['name'],
					'children' => $children_data,
					'column'   => $category['column'] ? $category['column'] : 1,
					'href'     => $this->url->link('product/category', 'path=' . $category['category_id'])
				);
			}
		}]]>
         </add>  
      </operation>
  </file>
   <file path="catalog/model/design/layout.php">
      <operation>
	 <search regex ="true" quote = "true">
             
    <![CDATA[~public function getLayoutModules($layout_id, $position) {
		$query = $this->db->query("SELECT * FROM " . DB_PREFIX . "layout_module WHERE layout_id = '" . (int)$layout_id . "' AND position = '" . $this->db->escape($position) . "' ORDER BY sort_order");
		
		return $query->rows;
	}~]]>
         </search>
         <add position ="replace">
        <![CDATA[
        
             public function getLayoutModules($layout_id, $position) {
		   $query = $this->db->query("SELECT * FROM " . DB_PREFIX . "layout_module WHERE layout_id = '" . (int)$layout_id . "' AND position = '" . $this->db->escape($position) . "' ORDER BY sort_order");
		
		   return $query->rows;
	     }


             public function getLayoutForAllPages(){
                        $query = $this->db->query("SELECT * FROM " . DB_PREFIX . "layout WHERE name like '%all pages%' LIMIT 1");

                         if ($query->num_rows) {
                             return $query->row['layout_id'];
                         } else {
                              return 0;
                         }
                 }]]>
         </add>  
      </operation>
  </file>
   <file path="catalog/controller/common/footer.php">
      <operation>
	 <search>
         <![CDATA[$this->load->model('catalog/product');]]>
         </search>
         <add position ="after">
          <![CDATA[$data['modules'] = array();
                
                   $data['modules']['newslettersubscribe'] = $this->load->controller('module/newslettersubscribe');]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/controller/common/footer.php">
      <operation>
	 <search>
         <![CDATA[$data['text_information'] = $this->language->get('text_information');]]>
         </search>
         <add position ="after">
   <![CDATA[if ($this->request->server['HTTPS']) {
			$server = $this->config->get('config_ssl');
		} else {
			$server = $this->config->get('config_url');
		}

                if (is_file(DIR_IMAGE . $this->config->get('config_logo'))) {
			$data['logo'] = $server . 'image/' . $this->config->get('config_logo');
		} else {
			$data['logo'] = '';
		}
                
                $data['home'] = $this->url->link('common/home');
                $data['name'] = $this->config->get('config_name');]]>
         </add>  
      </operation>
  </file>
    <file path="catalog/controller/common/home.php">
      <operation>
	 <search>
         <![CDATA[$data['header'] = $this->load->controller('common/header');]]>
         </search>
         <add position ="after">
         <![CDATA[$this->load->model('extension/module');
                
                $this->load->model('design/layout');
                
                $layout_id = 1;
                
		$modules = $this->model_design_layout->getLayoutModules($layout_id, 'content_top');

		foreach ($modules as $module) {
			$part = explode('.', $module['code']);

			
			if (isset($part[0]) && $this->config->get($part[0] . '_status') && preg_match('/^meggy_slideshow/', $part[0])){
                            
                           $data['meggy_slideshow'] = $this->load->controller('module/' . $part[0]); 
                        }

			if (isset($part[1])) {
				$setting_info = $this->model_extension_module->getModule($part[1]);

			
				if ($setting_info && $setting_info['status'] && preg_match('/^meggy_slideshow/', $part[0])) {
                                    
                                    $data['meggy_slideshow'] = $this->load->controller('module/' . $part[0], $setting_info); 
                                }
			}
		}]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/controller/common/content_top.php">
      <operation>
	 <search regex ="true" quote = "true">
	 <![CDATA[~foreach ($modules as $module) {
			$part = explode('.', $module['code']);

			if (isset($part[0]) && $this->config->get($part[0] . '_status')) {
				$data['modules'][] = $this->load->controller('module/' . $part[0]);
			} 
                            
			if (isset($part[1])) {
				$setting_info = $this->model_extension_module->getModule($part[1]);

				if ($setting_info && $setting_info['status']) {
					$data['modules'][] = $this->load->controller('module/' . $part[0], $setting_info);
				} 
			}
		}~]]>
         </search>
         <add position ="replace">
         <![CDATA[foreach ($modules as $module) {
			$part = explode('.', $module['code']);

			if (isset($part[0]) && $this->config->get($part[0] . '_status') && !preg_match('/^meggy_slideshow/', $part[0])) {
				$data['modules'][] = $this->load->controller('module/' . $part[0]);
			} 
                            
			if (isset($part[1])) {
				$setting_info = $this->model_extension_module->getModule($part[1]);

				if ($setting_info && $setting_info['status'] && !preg_match('/^meggy_slideshow/', $part[0])) {
					$data['modules'][] = $this->load->controller('module/' . $part[0], $setting_info);
				} 
			}
		}]]>
         </add>  
      </operation>
  </file> 
  <file path="catalog/controller/common/cart.php">
      <operation>
	 <search>
         <![CDATA[$data['text_items'] = sprintf($this->language->get('text_items'), $this->cart->countProducts() + (isset($this->session->data['vouchers']) ? count($this->session->data['vouchers']) : 0), $this->currency->format($total));]]>
         </search>
         <add position ="replace">
          <![CDATA[$data['text_items'] = sprintf(preg_match("/^0.0/", $this->currency->format($total))? '':  $this->currency->format($total));
                   $data['cart_value'] = $this->cart->countProducts();]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/controller/product/product.php">
      <operation>
	 <search>
         <![CDATA[$data['text_loading'] = $this->language->get('text_loading');]]>
         </search>
         <add position ="after">
          <![CDATA[ $data['entry_sku'] = $this->language->get('entry_sku');]]>
         </add>  
      </operation>
  </file>
   <file path="catalog/controller/product/product.php">
      <operation>
	 <search>
         <![CDATA[$data['points'] = $product_info['points'];]]>
         </search>
         <add position ="after">
          <![CDATA[$data['sku'] = $product_info['sku'];]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/language/russian/product/product.php">
      <operation>
	 <search>
         <![CDATA[$_['text_write']                              = 'Написать отзыв';]]>
         </search>
         <add position ="replace">
          <![CDATA[$_['text_write']                              = 'будь первым, кто оставил отзыв об этом товаре';]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/language/russian/product/product.php">
      <operation>
	 <search>
         <![CDATA[$_['text_reviews']                            = '%s отзывов';]]>
         </search>
         <add position ="replace">
          <![CDATA[$_['text_reviews']                            = '(%s) Отзывов';]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/controller/product/product.php">
      <operation>
	 <search>
         <![CDATA[$this->load->model('catalog/category');]]>
         </search>
         <add position ="after">
          <![CDATA[
                $data['new_goods'] = $this->db->query("SELECT product_id FROM " . DB_PREFIX . "product WHERE status = 1 ORDER BY date_added ASC LIMIT 20");

		$data['action_goods'] = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_special B ON A.product_id =  B.product_id  WHERE status = 1 AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) ORDER BY date_added ASC LIMIT 20"); 
                
                $data['discount_goods'] = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_discount B ON A.product_id =  B.product_id  WHERE status = 1 AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) ORDER BY date_added ASC LIMIT 20"); 
         ]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/language/russian/russian.php">
      <operation>
	 <search>
         <![CDATA[$_['text_home']             = '<i class="fa fa-home"></i>';]]>
         </search>
         <add position ="replace">
          <![CDATA[$_['text_home']             = 'Главная';]]>
         </add>  
      </operation>
      <operation>
	 <search>
         <![CDATA[$_['button_cart']           = 'Купить';]]>
         </search>
         <add position ="replace">
          <![CDATA[$_['button_cart']           = 'В корзину';]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/language/russian/product/product.php">
      <operation>
	 <search>
         <![CDATA[$_['text_related']                            = 'Рекомендуемые товары';]]>
         </search>
         <add position ="replace">
          <![CDATA[$_['text_related']                            = 'Вам может понравиться';]]>
         </add>  
      </operation>
  </file>
    <file path="catalog/controller/product/product.php">
      <operation>
	 <search>
         <![CDATA[$data['description'] = html_entity_decode($product_info['description'], ENT_QUOTES, 'UTF-8');]]>
         </search>
         <add position ="after">
          <![CDATA[  $data['new_goods_flag'] = FALSE;
                   if (is_array($data['new_goods'])) {     
                     foreach ($data['new_goods'] as $new_goods) {
                            
                            foreach((array)$new_goods as $new_good) {
                            
                                 if (in_array($data['product_id'], (array)$new_good)) {
                    
                                     $data['new_goods_flag'] = true;
                                 }
                            }  
                            
                        }
                    }    
                        
                       $data['action_goods_flag'] = FALSE;
                       
                     if (is_array($data['action_goods'])) {   
                       foreach ($data['action_goods'] as $action_goods) {
                            
                            foreach((array)$action_goods as $action_good) {
                            
                                 if (in_array($data['product_id'], (array)$action_good)) {
                    
                                     $data['action_goods_flag'] = true;
                                 }
                            }  
                            
                        }
                     } 
                     
                      $data['discount_goods_flag'] = FALSE; 
                    if (is_array($data['discount_goods'])) {
                      foreach ($data['discount_goods'] as $discount_goods) {
                            
                            foreach((array)$discount_goods as $discount_good) {
                            
                                 if (in_array($data['product_id'], (array)$discount_good)) {
                    
                                     $data['discount_goods_flag'] = true;
                                 }
                            }  
                            
                        }
                     }   
                        ]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/controller/product/product.php">
      <operation>
	    <search><![CDATA[$results = $this->model_catalog_product->getProductRelated($this->request->get['product_id']);]]></search>
	    <add position="after"><![CDATA[ $this->markForSpecialGoods();]]></add>
      </operation>
      <operation>
	 <search regex ="true" quote = "true">
       
                      <![CDATA[~$data['products'][] = array(
					'product_id'  => $result['product_id'],
					'thumb'       => $image,
					'name'        => $result['name'],
					'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get('config_product_description_length')) . '..',
					'price'       => $price,
					'special'     => $special,
					'tax'         => $tax,
					'minimum'     => $result['minimum'] > 0 ? $result['minimum'] : 1,
					'rating'      => $rating,
					'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id'])
				);~]]>
         </search>
         <add position ="replace">
                       <![CDATA[$data['products'][] = array(
					'product_id'  => $result['product_id'],
					'thumb'       => $image,
					'name'        => $result['name'],
					'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get('config_product_description_length')) . '..',
					'price'       => $price,
					'special'     => $special,
					'tax'         => $tax,
					'minimum'     => $result['minimum'] > 0 ? $result['minimum'] : 1,
					'rating'      => $rating,
					'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id']),
                                        'sku'         => $result['sku'],
                                        'new_goods_flag'      => (in_array($result['product_id'], $this->new_goods))? 1: 0,
                                        'discount_goods_flag' => (in_array($result['product_id'], $this->discount_goods))? 1: 0,
                                        'action_goods_flag'   => (in_array($result['product_id'], $this->action_goods))? 1: 0,
                                        'size'         => $this->OptionForNewGoods($result['product_id'])
				);]]>
         </add>  
      </operation>
      <operation>
	 <search>
         <![CDATA[public function index() {]]>
         </search>
         <add position ="before">
<![CDATA[
     private $new_goods = array();
     private $action_goods = array();
     private $discount_goods = array();
       
     protected function OptionForNewGoods($product_id) {
            
            $options = array();
            
            $this->load->model('catalog/product');
            
            foreach ($this->model_catalog_product->getProductOptions($product_id) as $option) {
		   $product_option_value_data = array();
				foreach ($option['product_option_value'] as $option_value) {
					if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
			
			              		$product_option_value_data[] = array(
							'product_option_value_id' => $option_value['product_option_value_id'],
							'option_value_id'         => $option_value['option_value_id'],
							'name'                    => $option_value['name']
						);
					}
				}

				$options['options'][] = array(
					'product_option_id'    => $option['product_option_id'],
					'product_option_value' => $product_option_value_data,
					'option_id'            => $option['option_id'],
					'name'                 => $option['name'],
					'type'                 => $option['type'],
					'value'                => $option['value'],
					'required'             => $option['required']
				);
	    }
            return $options;
        }
        
        private function markForSpecialGoods() {
            
                $new_goods = $this->db->query("SELECT product_id FROM " . DB_PREFIX . "product WHERE status = 1 ORDER BY date_added ASC LIMIT 50");

		$action_goods = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_special B ON A.product_id =  B.product_id  WHERE status = 1 AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) ORDER BY date_added ASC"); 
                
                $discount_goods = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_discount B ON A.product_id =  B.product_id  WHERE status = 1 AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) ORDER BY date_added ASC");  
            
                $new_goods = (!empty($new_goods))? (array)$new_goods : NULL;
                
                $action_goods = (!empty($action_goods))? (array)$action_goods : NULL;
                
                $discount_goods = (!empty($discount_goods))? (array)$discount_goods : NULL;
                
                if (is_array($new_goods)) {
                    
                    foreach ($new_goods as $new_good) {
                        
                        if (is_array($new_good)) {
                           foreach ($new_good as $good => $index) {
                            
                               if ($good !== 'product_id') {
                                 $this->new_goods[$good] = $index['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                if (is_array($action_goods)) {
                    
                    foreach ($action_goods as $action_good) {
                        
                        if (is_array($action_good)) {
                           foreach ($action_good as $action => $mark) {
                            
                               if ($action !== 'product_id') {
                                 $this->action_goods[$action] = $mark['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                if (is_array($discount_goods)) {
                    
                    foreach ($discount_goods as $discount_good) {
                        
                        if (is_array($discount_good)) {
                           foreach ($discount_good as $discount => $sign) {
                            
                               if ($discount !== 'product_id') {
                                 $this->discount_goods[$discount] = $sign['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                
        }]]>
         </add>  
      </operation>
  </file>
  <file path="catalog/controller/product/category.php">
       <operation>
	    <search><![CDATA['rating'      => $result['rating'],]]></search>
	    <add position="after"><![CDATA[ 'sku'                 => $result['sku'],
                                            'new_goods_flag'      => (in_array($result['product_id'], $this->new_goods))? 1: 0,
                                            'discount_goods_flag' => (in_array($result['product_id'], $this->discount_goods))? 1: 0,
                                            'size'                => $this->OptionForNewGoods($result['product_id']),
                                            'action_goods_flag'   => (in_array($result['product_id'], $this->action_goods))? 1: 0,]]></add>
      </operation>
      <operation>
	    <search><![CDATA[$results = $this->model_catalog_product->getProducts($filter_data);]]></search>
	    <add position="after"><![CDATA[ $this->markForSpecialGoods();]]></add>
      </operation>
      <operation>
	    <search><![CDATA[public function index() {]]></search>
	    <add position="before">
<![CDATA[
       private $new_goods = array();
       private $action_goods = array();
       private $discount_goods = array();
       
       protected function OptionForNewGoods($product_id) {
            
            $options = array();
            
            $this->load->model('catalog/product');
            
            foreach ($this->model_catalog_product->getProductOptions($product_id) as $option) {
		   $product_option_value_data = array();
				foreach ($option['product_option_value'] as $option_value) {
					if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
			
			              		$product_option_value_data[] = array(
							'product_option_value_id' => $option_value['product_option_value_id'],
							'option_value_id'         => $option_value['option_value_id'],
							'name'                    => $option_value['name']
						);
					}
				}

				$options['options'][] = array(
					'product_option_id'    => $option['product_option_id'],
					'product_option_value' => $product_option_value_data,
					'option_id'            => $option['option_id'],
					'name'                 => $option['name'],
					'type'                 => $option['type'],
					'value'                => $option['value'],
					'required'             => $option['required']
				);
	    }
            return $options;
        }
       
    
    
        private function markForSpecialGoods() {
            
                $new_goods = $this->db->query("SELECT product_id FROM " . DB_PREFIX . "product WHERE status = 1 ORDER BY date_added ASC LIMIT 50");

		$action_goods = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_special B ON A.product_id =  B.product_id  AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) WHERE status = 1 ORDER BY date_added ASC"); 
                
                $discount_goods = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_discount B ON A.product_id =  B.product_id  WHERE status = 1 AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) ORDER BY date_added ASC");  
            
                $new_goods = (!empty($new_goods))? (array)$new_goods : NULL;
                
                $action_goods = (!empty($action_goods))? (array)$action_goods : NULL;
                
                $discount_goods = (!empty($discount_goods))? (array)$discount_goods : NULL;
                
                if (is_array($new_goods)) {
                    
                    foreach ($new_goods as $new_good) {
                        
                        if (is_array($new_good)) {
                           foreach ($new_good as $good => $index) {
                            
                               if ($good !== 'product_id') {
                                 $this->new_goods[$good] = $index['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                if (is_array($action_goods)) {
                    
                    foreach ($action_goods as $action_good) {
                        
                        if (is_array($action_good)) {
                           foreach ($action_good as $action => $mark) {
                            
                               if ($action !== 'product_id') {
                                 $this->action_goods[$action] = $mark['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                if (is_array($discount_goods)) {
                    
                    foreach ($discount_goods as $discount_good) {
                        
                        if (is_array($discount_good)) {
                           foreach ($discount_good as $discount => $sign) {
                            
                               if ($discount !== 'product_id') {
                                 $this->discount_goods[$discount] = $sign['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                
        }]]>
    </add>
   </operation>
   <operation>
	    <search><![CDATA[$this->load->model('tool/image');]]></search>
	    <add position="after"><![CDATA[ $this->document->addScript('catalog/view/javascript/picturefill.js');]]></add>
   </operation>
  </file>
  <file path="catalog/controller/product/search.php">
      <operation>
	 <search regex ="true" quote = "true">
		      <![CDATA[~$data['products'][] = array(
					'product_id'  => $result['product_id'],
					'thumb'       => $image,
					'name'        => $result['name'],
					'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get('config_product_description_length')) . '..',
					'price'       => $price,
					'special'     => $special,
					'tax'         => $tax,
					'minimum'     => $result['minimum'] > 0 ? $result['minimum'] : 1,
					'rating'      => $result['rating'],
					'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id'] . $url)
				);~]]>
         </search>
         <add position ="replace">
                       <![CDATA[$data['products'][] = array(
					'product_id'  => $result['product_id'],
					'thumb'       => $image,
					'name'        => $result['name'],
					'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get('config_product_description_length')) . '..',
					'price'       => $price,
					'special'     => $special,
					'tax'         => $tax,
					'minimum'     => $result['minimum'] > 0 ? $result['minimum'] : 1,
					'rating'      => $result['rating'],
					'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id'] . $url),
                                        'sku'         => $result['sku'],
                                        'new_goods_flag'      => (in_array($result['product_id'], $this->new_goods))? 1: 0,
                                        'discount_goods_flag' => (in_array($result['product_id'], $this->discount_goods))? 1: 0,
                                        'action_goods_flag'   => (in_array($result['product_id'], $this->action_goods))? 1: 0,
                                        'size'         => $this->OptionForNewGoods($result['product_id'])
				);]]>
         </add>  
      </operation>
      <operation>
	 <search>
         <![CDATA[public function index() {]]>
         </search>
         <add position ="before">
<![CDATA[
       private $new_goods = array();
       private $action_goods = array();
       private $discount_goods = array();

        private function markForSpecialGoods() {
            
                $new_goods = $this->db->query("SELECT product_id FROM " . DB_PREFIX . "product WHERE status = 1 ORDER BY date_added ASC LIMIT 50");

		$action_goods = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_special B ON A.product_id =  B.product_id  WHERE status = 1 AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) ORDER BY date_added ASC"); 
                
                $discount_goods = $this->db->query("SELECT A.product_id FROM " . DB_PREFIX . "product A INNER JOIN " . DB_PREFIX . "product_discount B ON A.product_id =  B.product_id  WHERE status = 1 AND ((B.date_start = '0000-00-00' OR B.date_start < NOW()) AND (B.date_end = '0000-00-00' OR B.date_end > NOW())) ORDER BY date_added ASC");  
            
                $new_goods = (!empty($new_goods))? (array)$new_goods : NULL;
                
                $action_goods = (!empty($action_goods))? (array)$action_goods : NULL;
                
                $discount_goods = (!empty($discount_goods))? (array)$discount_goods : NULL;
                
                if (is_array($new_goods)) {
                    
                    foreach ($new_goods as $new_good) {
                        
                        if (is_array($new_good)) {
                           foreach ($new_good as $good => $index) {
                            
                               if ($good !== 'product_id') {
                                 $this->new_goods[$good] = $index['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                if (is_array($action_goods)) {
                    
                    foreach ($action_goods as $action_good) {
                        
                        if (is_array($action_good)) {
                           foreach ($action_good as $action => $mark) {
                            
                               if ($action !== 'product_id') {
                                 $this->action_goods[$action] = $mark['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                if (is_array($discount_goods)) {
                    
                    foreach ($discount_goods as $discount_good) {
                        
                        if (is_array($discount_good)) {
                           foreach ($discount_good as $discount => $sign) {
                            
                               if ($discount !== 'product_id') {
                                 $this->discount_goods[$discount] = $sign['product_id'];   
                               }
                                
                           }
                        }
                        
                    }
                }
                
                
        }
        protected function OptionForNewGoods($product_id) {
            
            $options = array();
            
            $this->load->model('catalog/product');
            
            foreach ($this->model_catalog_product->getProductOptions($product_id) as $option) {
		   $product_option_value_data = array();
				foreach ($option['product_option_value'] as $option_value) {
					if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {
			
			              		$product_option_value_data[] = array(
							'product_option_value_id' => $option_value['product_option_value_id'],
							'option_value_id'         => $option_value['option_value_id'],
							'name'                    => $option_value['name']
						);
					}
				}

				$options['options'][] = array(
					'product_option_id'    => $option['product_option_id'],
					'product_option_value' => $product_option_value_data,
					'option_id'            => $option['option_id'],
					'name'                 => $option['name'],
					'type'                 => $option['type'],
					'value'                => $option['value'],
					'required'             => $option['required']
				);
	    }
            return $options;
        }]]>
         </add>  
      </operation>
      <operation>
	    <search><![CDATA[$product_total = $this->model_catalog_product->getTotalProducts($filter_data);]]></search>
	    <add position="after"><![CDATA[ $this->markForSpecialGoods();]]></add>
      </operation>
  </file>
  </modification>
  
  
  
  
  
  
			

  
  
 
 
